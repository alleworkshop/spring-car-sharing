buildscript {
	ext {
		versions = [
				spock         : '1.1-groovy-2.4',
				springWiremock: '1.2.3.RELEASE'
		]
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'eu.solidcraft'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.cloud:spring-cloud-stream-binder-kafka')
	compile('org.springframework.cloud:spring-cloud-stream-reactive')
	compile('org.springframework.kafka:spring-kafka')

	runtime('com.h2database:h2')
	compileOnly('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
	testCompile('io.projectreactor:reactor-test')
	testCompile('org.springframework.security:spring-security-test')
	testCompile('org.springframework.cloud:spring-cloud-stream-test-support')	
	testCompile "cglib:cglib-nodep:3.2.5"
	testCompile "org.spockframework:spock-core:$versions.spock"
	testCompile "org.spockframework:spock-spring:$versions.spock"
	testCompile "org.springframework:spring-test"
}

ext {
	springCloudVersion = 'Finchley.BUILD-SNAPSHOT'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.withType(GroovyCompile) {
	groovyOptions.optimizationOptions.indy = true
	options.encoding = 'UTF-8'
}

compileJava {
	options.incremental = true
	options.compilerArgs << '-parameters'
	options.compilerArgs << '-Xlint:unchecked'
}
